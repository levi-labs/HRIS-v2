// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(60)
  users User[]

  @@map("roles")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique @db.VarChar(40)
  email           String            @unique @db.VarChar(60)
  password        String            @db.VarChar(255)
  roleId          Int               @db.Int
  role            Role              @relation(fields: [roleId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  employees       Employee?
  leaveRequests   LeaveRequest[]
  salaryHistory   SalaryHistory[]
  transferRequest TransferRequest[]

  @@map("users")
}

model Department {
  id           Int                @id @default(autoincrement())
  name         String             @db.VarChar(80)
  phone        String             @db.VarChar(25)
  jobPositions JobPosition[]
  offices      DepartmentOffice[]

  @@map("departments")
}

model DepartmentOffice {
  id           Int        @id @default(autoincrement())
  departmentId Int
  officeId     Int
  startDate    DateTime   @default(now()) // Kapan departemen mulai ada di kantor ini
  endDate      DateTime? // Null jika masih aktif
  department   Department @relation(fields: [departmentId], references: [id])
  office       Office     @relation(fields: [officeId], references: [id])

  @@map("department_offices")
}

enum JobLevel {
  INTERN
  ENTRY_LEVEL
  JUNIOR
  MID_LEVEL
  SENIOR
  LEAD
  SUPERVISOR
  MANAGER
  SENIOR_MANAGER
  DIRECTOR
  VICE_PRESIDENT
  C_LEVEL
  FOUNDER
}

model JobPosition {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(80)
  level         JobLevel
  salary_min    Decimal     @db.Decimal(18, 2)
  salary_max    Decimal     @db.Decimal(18, 2)
  department_id Int?        @db.Int
  department    Department? @relation(fields: [department_id], references: [id])
  employees     Employee[]

  @@map("job_positions")
}

model Employee {
  id              Int         @id @default(autoincrement())
  first_name      String      @db.VarChar(60)
  last_name       String      @db.VarChar(60)
  userId          Int         @unique
  user            User        @relation(fields: [userId], references: [id])
  job_position_id Int
  job_position    JobPosition @relation(fields: [job_position_id], references: [id])

  attendance           Attendance[]
  offices              EmployeeOffice[]
  leaveRequests        LeaveRequest[]
  payrolls             Payroll[]
  documents            Document[]
  salaryHistory        SalaryHistory[]
  employeeWorkSchedule EmployeeWorkSchedule[]
  TransferRequest      TransferRequest[]

  @@map("employees")
}

model EmployeeWorkSchedule {
  id           Int                @id @default(autoincrement())
  employeeId   Int
  scheduleDate DateTime           @db.Date // Tanggal jadwal kerja
  workType     WorkType // Enum: SHIFT CHANGE, WFO
  status       WorkScheduleStatus
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("employee_work_schedules")
}

enum WorkScheduleStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WorkType {
  SHIFT_CHANGE // Perubahan shift atau lokasi kantor sementara
  WFH // Work from Home
}

model EmployeeOffice {
  id         Int       @id @default(autoincrement())
  employeeId Int
  officeId   Int
  startDate  DateTime  @default(now()) // Kapan mulai di kantor ini
  endDate    DateTime? // Null jika masih aktif
  isActive   Boolean   @default(true)
  employee   Employee  @relation(fields: [employeeId], references: [id])
  office     Office    @relation(fields: [officeId], references: [id])

  @@map("employee_offices")
}

model SalaryHistory {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  oldSalary   Decimal  @db.Decimal(18, 2)
  newSalary   Decimal  @db.Decimal(18, 2)
  effectiveAt DateTime @db.Date
  updatedBy   Int
  updater     User     @relation(fields: [updatedBy], references: [id])

  @@map("salary_histories")
}

model Attendance {
  id          Int              @id @default(autoincrement())
  employeeId  Int
  employee    Employee         @relation(fields: [employeeId], references: [id])
  date        DateTime         @db.Date
  checkIn     DateTime         @db.Timestamp()
  checkOut    DateTime?        @db.Timestamp()
  status      AttendanceStatus @default(PRESENT)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  geolocation Geolocation? // Wajib punya 1 Geolocation

  @@map("attendances")
}

model Office {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(60)
  latitude  Decimal @db.Decimal(18, 8)
  longitude Decimal @db.Decimal(11, 8)

  employees        EmployeeOffice[]
  officeSchedules  OfficeSchedule[]
  departmentOffice DepartmentOffice[]

  @@map("offices")
}

model OfficeSchedule {
  id          Int     @id @default(autoincrement())
  officeId    Int
  office      Office  @relation(fields: [officeId], references: [id])
  day         String  @db.VarChar(10) // Senin, Selasa, Rabu, dll.
  work_start  String  @db.VarChar(10)
  work_end    String  @db.VarChar(10)
  break_start String? @db.VarChar(10)
  break_end   String? @db.VarChar(10)

  late_tolerance  Int @default(15) // Toleransi keterlambatan dalam menit
  early_tolerance Int @default(10) // Batas lebih awal pulang

  @@map("office_schedules")
}

model Geolocation {
  id                Int        @id @default(autoincrement())
  checkInLatitude   Decimal    @db.Decimal(18, 8)
  checkInLongitude  Decimal    @db.Decimal(11, 8)
  checkOutLatitude  Decimal?   @db.Decimal(18, 8)
  checkOutLongitude Decimal?   @db.Decimal(11, 8)
  attendanceId      Int        @unique // Foreign Key ke Attendance.id (One-to-One)
  attendance        Attendance @relation(fields: [attendanceId], references: [id], onDelete: Cascade)

  @@map("geolocations")
}

model LeaveRequest {
  id         Int         @id @default(autoincrement())
  employeeId Int
  employee   Employee    @relation(fields: [employeeId], references: [id])
  startDate  DateTime    @db.Date
  endDate    DateTime    @db.Date
  leaveType  LeaveType
  reason     String      @db.VarChar(120)
  status     LeaveStatus @default(PENDING)
  approvedBy Int?
  approver   User?       @relation(fields: [approvedBy], references: [id])

  @@map("leave_requests")
}

model TransferRequest {
  id          Int                   @id @default(autoincrement())
  employeeId  Int
  fromOffice  Int
  toOffice    Int
  status      TransferRequestStatus // Pending, Approved, Rejected
  requestDate DateTime              @default(now())
  approvedBy  Int? // HR/Admin yang menyetujui
  employee    Employee              @relation(fields: [employeeId], references: [id])
  approver    User?                 @relation(fields: [approvedBy], references: [id])
}

model Payroll {
  id         Int           @id @default(autoincrement())
  employeeId Int
  employee   Employee      @relation(fields: [employeeId], references: [id])
  salary     Decimal       @db.Decimal(18, 2)
  bonus      Decimal       @db.Decimal(18, 2)
  deduction  Decimal       @db.Decimal(18, 2)
  netSalary  Decimal       @db.Decimal(18, 2)
  payDate    DateTime      @db.Date
  status     PayrollStatus @default(PENDING)

  @@map("payrolls")
}

model Document {
  id         Int      @id @default(autoincrement())
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])
  title      String   @db.VarChar(120)
  filePath   String   @db.Text
  uploadedAt DateTime @default(now())

  @@map("documents")
}

enum TransferRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
  SICK
  LEAVE
}

enum LeaveType {
  ANNUAL // Cuti tahunan
  SICK // Cuti sakit
  MATERNITY // Cuti melahirkan
  PATERNITY // Cuti ayah
  UNPAID // Cuti tanpa gaji
  PERSONAL // Cuti pribadi
  BEREAVEMENT // Cuti duka
  MARRIAGE // Cuti pernikahan
  STUDY // Cuti belajar
  RELIGIOUS // Cuti keagamaan
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PayrollStatus {
  PENDING
  PAID
  FAILED
}
